
using OpenTK.Windowing.GraphicsLibraryFramework;

namespace SoulEngine.Input;

/// <summary>
/// Provides an action for every key
/// </summary>
public sealed class KeyActions 
{
    public readonly InputAction Space;
    public readonly InputAction Apostrophe;
    public readonly InputAction Comma;
    public readonly InputAction Minus;
    public readonly InputAction Period;
    public readonly InputAction Slash;
    public readonly InputAction D0;
    public readonly InputAction D1;
    public readonly InputAction D2;
    public readonly InputAction D3;
    public readonly InputAction D4;
    public readonly InputAction D5;
    public readonly InputAction D6;
    public readonly InputAction D7;
    public readonly InputAction D8;
    public readonly InputAction D9;
    public readonly InputAction Semicolon;
    public readonly InputAction Equal;
    public readonly InputAction A;
    public readonly InputAction B;
    public readonly InputAction C;
    public readonly InputAction D;
    public readonly InputAction E;
    public readonly InputAction F;
    public readonly InputAction G;
    public readonly InputAction H;
    public readonly InputAction I;
    public readonly InputAction J;
    public readonly InputAction K;
    public readonly InputAction L;
    public readonly InputAction M;
    public readonly InputAction N;
    public readonly InputAction O;
    public readonly InputAction P;
    public readonly InputAction Q;
    public readonly InputAction R;
    public readonly InputAction S;
    public readonly InputAction T;
    public readonly InputAction U;
    public readonly InputAction V;
    public readonly InputAction W;
    public readonly InputAction X;
    public readonly InputAction Y;
    public readonly InputAction Z;
    public readonly InputAction LeftBracket;
    public readonly InputAction Backslash;
    public readonly InputAction RightBracket;
    public readonly InputAction GraveAccent;
    public readonly InputAction Escape;
    public readonly InputAction Enter;
    public readonly InputAction Tab;
    public readonly InputAction Backspace;
    public readonly InputAction Insert;
    public readonly InputAction Delete;
    public readonly InputAction Right;
    public readonly InputAction Left;
    public readonly InputAction Down;
    public readonly InputAction Up;
    public readonly InputAction PageUp;
    public readonly InputAction PageDown;
    public readonly InputAction Home;
    public readonly InputAction End;
    public readonly InputAction CapsLock;
    public readonly InputAction ScrollLock;
    public readonly InputAction NumLock;
    public readonly InputAction PrintScreen;
    public readonly InputAction Pause;
    public readonly InputAction F1;
    public readonly InputAction F2;
    public readonly InputAction F3;
    public readonly InputAction F4;
    public readonly InputAction F5;
    public readonly InputAction F6;
    public readonly InputAction F7;
    public readonly InputAction F8;
    public readonly InputAction F9;
    public readonly InputAction F10;
    public readonly InputAction F11;
    public readonly InputAction F12;
    public readonly InputAction F13;
    public readonly InputAction F14;
    public readonly InputAction F15;
    public readonly InputAction F16;
    public readonly InputAction F17;
    public readonly InputAction F18;
    public readonly InputAction F19;
    public readonly InputAction F20;
    public readonly InputAction F21;
    public readonly InputAction F22;
    public readonly InputAction F23;
    public readonly InputAction F24;
    public readonly InputAction F25;
    public readonly InputAction KeyPad0;
    public readonly InputAction KeyPad1;
    public readonly InputAction KeyPad2;
    public readonly InputAction KeyPad3;
    public readonly InputAction KeyPad4;
    public readonly InputAction KeyPad5;
    public readonly InputAction KeyPad6;
    public readonly InputAction KeyPad7;
    public readonly InputAction KeyPad8;
    public readonly InputAction KeyPad9;
    public readonly InputAction KeyPadDecimal;
    public readonly InputAction KeyPadDivide;
    public readonly InputAction KeyPadMultiply;
    public readonly InputAction KeyPadSubtract;
    public readonly InputAction KeyPadAdd;
    public readonly InputAction KeyPadEnter;
    public readonly InputAction KeyPadEqual;
    public readonly InputAction LeftShift;
    public readonly InputAction LeftControl;
    public readonly InputAction LeftAlt;
    public readonly InputAction LeftSuper;
    public readonly InputAction RightShift;
    public readonly InputAction RightControl;
    public readonly InputAction RightAlt;
    public readonly InputAction RightSuper;
    public readonly InputAction Menu;


    public KeyActions(InputManager inputManager)
    {
        Space = inputManager.Action("builtin.keys.space", Keys.Space);
        Apostrophe = inputManager.Action("builtin.keys.apostrophe", Keys.Apostrophe);
        Comma = inputManager.Action("builtin.keys.comma", Keys.Comma);
        Minus = inputManager.Action("builtin.keys.minus", Keys.Minus);
        Period = inputManager.Action("builtin.keys.period", Keys.Period);
        Slash = inputManager.Action("builtin.keys.slash", Keys.Slash);
        D0 = inputManager.Action("builtin.keys.d0", Keys.D0);
        D1 = inputManager.Action("builtin.keys.d1", Keys.D1);
        D2 = inputManager.Action("builtin.keys.d2", Keys.D2);
        D3 = inputManager.Action("builtin.keys.d3", Keys.D3);
        D4 = inputManager.Action("builtin.keys.d4", Keys.D4);
        D5 = inputManager.Action("builtin.keys.d5", Keys.D5);
        D6 = inputManager.Action("builtin.keys.d6", Keys.D6);
        D7 = inputManager.Action("builtin.keys.d7", Keys.D7);
        D8 = inputManager.Action("builtin.keys.d8", Keys.D8);
        D9 = inputManager.Action("builtin.keys.d9", Keys.D9);
        Semicolon = inputManager.Action("builtin.keys.semicolon", Keys.Semicolon);
        Equal = inputManager.Action("builtin.keys.equal", Keys.Equal);
        A = inputManager.Action("builtin.keys.a", Keys.A);
        B = inputManager.Action("builtin.keys.b", Keys.B);
        C = inputManager.Action("builtin.keys.c", Keys.C);
        D = inputManager.Action("builtin.keys.d", Keys.D);
        E = inputManager.Action("builtin.keys.e", Keys.E);
        F = inputManager.Action("builtin.keys.f", Keys.F);
        G = inputManager.Action("builtin.keys.g", Keys.G);
        H = inputManager.Action("builtin.keys.h", Keys.H);
        I = inputManager.Action("builtin.keys.i", Keys.I);
        J = inputManager.Action("builtin.keys.j", Keys.J);
        K = inputManager.Action("builtin.keys.k", Keys.K);
        L = inputManager.Action("builtin.keys.l", Keys.L);
        M = inputManager.Action("builtin.keys.m", Keys.M);
        N = inputManager.Action("builtin.keys.n", Keys.N);
        O = inputManager.Action("builtin.keys.o", Keys.O);
        P = inputManager.Action("builtin.keys.p", Keys.P);
        Q = inputManager.Action("builtin.keys.q", Keys.Q);
        R = inputManager.Action("builtin.keys.r", Keys.R);
        S = inputManager.Action("builtin.keys.s", Keys.S);
        T = inputManager.Action("builtin.keys.t", Keys.T);
        U = inputManager.Action("builtin.keys.u", Keys.U);
        V = inputManager.Action("builtin.keys.v", Keys.V);
        W = inputManager.Action("builtin.keys.w", Keys.W);
        X = inputManager.Action("builtin.keys.x", Keys.X);
        Y = inputManager.Action("builtin.keys.y", Keys.Y);
        Z = inputManager.Action("builtin.keys.z", Keys.Z);
        LeftBracket = inputManager.Action("builtin.keys.left_bracket", Keys.LeftBracket);
        Backslash = inputManager.Action("builtin.keys.backslash", Keys.Backslash);
        RightBracket = inputManager.Action("builtin.keys.right_bracket", Keys.RightBracket);
        GraveAccent = inputManager.Action("builtin.keys.grave_accent", Keys.GraveAccent);
        Escape = inputManager.Action("builtin.keys.escape", Keys.Escape);
        Enter = inputManager.Action("builtin.keys.enter", Keys.Enter);
        Tab = inputManager.Action("builtin.keys.tab", Keys.Tab);
        Backspace = inputManager.Action("builtin.keys.backspace", Keys.Backspace);
        Insert = inputManager.Action("builtin.keys.insert", Keys.Insert);
        Delete = inputManager.Action("builtin.keys.delete", Keys.Delete);
        Right = inputManager.Action("builtin.keys.right", Keys.Right);
        Left = inputManager.Action("builtin.keys.left", Keys.Left);
        Down = inputManager.Action("builtin.keys.down", Keys.Down);
        Up = inputManager.Action("builtin.keys.up", Keys.Up);
        PageUp = inputManager.Action("builtin.keys.page_up", Keys.PageUp);
        PageDown = inputManager.Action("builtin.keys.page_down", Keys.PageDown);
        Home = inputManager.Action("builtin.keys.home", Keys.Home);
        End = inputManager.Action("builtin.keys.end", Keys.End);
        CapsLock = inputManager.Action("builtin.keys.caps_lock", Keys.CapsLock);
        ScrollLock = inputManager.Action("builtin.keys.scroll_lock", Keys.ScrollLock);
        NumLock = inputManager.Action("builtin.keys.num_lock", Keys.NumLock);
        PrintScreen = inputManager.Action("builtin.keys.print_screen", Keys.PrintScreen);
        Pause = inputManager.Action("builtin.keys.pause", Keys.Pause);
        F1 = inputManager.Action("builtin.keys.f1", Keys.F1);
        F2 = inputManager.Action("builtin.keys.f2", Keys.F2);
        F3 = inputManager.Action("builtin.keys.f3", Keys.F3);
        F4 = inputManager.Action("builtin.keys.f4", Keys.F4);
        F5 = inputManager.Action("builtin.keys.f5", Keys.F5);
        F6 = inputManager.Action("builtin.keys.f6", Keys.F6);
        F7 = inputManager.Action("builtin.keys.f7", Keys.F7);
        F8 = inputManager.Action("builtin.keys.f8", Keys.F8);
        F9 = inputManager.Action("builtin.keys.f9", Keys.F9);
        F10 = inputManager.Action("builtin.keys.f10", Keys.F10);
        F11 = inputManager.Action("builtin.keys.f11", Keys.F11);
        F12 = inputManager.Action("builtin.keys.f12", Keys.F12);
        F13 = inputManager.Action("builtin.keys.f13", Keys.F13);
        F14 = inputManager.Action("builtin.keys.f14", Keys.F14);
        F15 = inputManager.Action("builtin.keys.f15", Keys.F15);
        F16 = inputManager.Action("builtin.keys.f16", Keys.F16);
        F17 = inputManager.Action("builtin.keys.f17", Keys.F17);
        F18 = inputManager.Action("builtin.keys.f18", Keys.F18);
        F19 = inputManager.Action("builtin.keys.f19", Keys.F19);
        F20 = inputManager.Action("builtin.keys.f20", Keys.F20);
        F21 = inputManager.Action("builtin.keys.f21", Keys.F21);
        F22 = inputManager.Action("builtin.keys.f22", Keys.F22);
        F23 = inputManager.Action("builtin.keys.f23", Keys.F23);
        F24 = inputManager.Action("builtin.keys.f24", Keys.F24);
        F25 = inputManager.Action("builtin.keys.f25", Keys.F25);
        KeyPad0 = inputManager.Action("builtin.keys.key_pad0", Keys.KeyPad0);
        KeyPad1 = inputManager.Action("builtin.keys.key_pad1", Keys.KeyPad1);
        KeyPad2 = inputManager.Action("builtin.keys.key_pad2", Keys.KeyPad2);
        KeyPad3 = inputManager.Action("builtin.keys.key_pad3", Keys.KeyPad3);
        KeyPad4 = inputManager.Action("builtin.keys.key_pad4", Keys.KeyPad4);
        KeyPad5 = inputManager.Action("builtin.keys.key_pad5", Keys.KeyPad5);
        KeyPad6 = inputManager.Action("builtin.keys.key_pad6", Keys.KeyPad6);
        KeyPad7 = inputManager.Action("builtin.keys.key_pad7", Keys.KeyPad7);
        KeyPad8 = inputManager.Action("builtin.keys.key_pad8", Keys.KeyPad8);
        KeyPad9 = inputManager.Action("builtin.keys.key_pad9", Keys.KeyPad9);
        KeyPadDecimal = inputManager.Action("builtin.keys.key_pad_decimal", Keys.KeyPadDecimal);
        KeyPadDivide = inputManager.Action("builtin.keys.key_pad_divide", Keys.KeyPadDivide);
        KeyPadMultiply = inputManager.Action("builtin.keys.key_pad_multiply", Keys.KeyPadMultiply);
        KeyPadSubtract = inputManager.Action("builtin.keys.key_pad_subtract", Keys.KeyPadSubtract);
        KeyPadAdd = inputManager.Action("builtin.keys.key_pad_add", Keys.KeyPadAdd);
        KeyPadEnter = inputManager.Action("builtin.keys.key_pad_enter", Keys.KeyPadEnter);
        KeyPadEqual = inputManager.Action("builtin.keys.key_pad_equal", Keys.KeyPadEqual);
        LeftShift = inputManager.Action("builtin.keys.left_shift", Keys.LeftShift);
        LeftControl = inputManager.Action("builtin.keys.left_control", Keys.LeftControl);
        LeftAlt = inputManager.Action("builtin.keys.left_alt", Keys.LeftAlt);
        LeftSuper = inputManager.Action("builtin.keys.left_super", Keys.LeftSuper);
        RightShift = inputManager.Action("builtin.keys.right_shift", Keys.RightShift);
        RightControl = inputManager.Action("builtin.keys.right_control", Keys.RightControl);
        RightAlt = inputManager.Action("builtin.keys.right_alt", Keys.RightAlt);
        RightSuper = inputManager.Action("builtin.keys.right_super", Keys.RightSuper);
        Menu = inputManager.Action("builtin.keys.menu", Keys.Menu);
    }
}
